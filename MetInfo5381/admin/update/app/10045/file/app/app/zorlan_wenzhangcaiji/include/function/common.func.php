<?php
defined('IN_MET') or exit('No permission'); function curl_get_html($url, $fromEncode = 'auto',$post_data=null,$cookieFile=null,$otherParams=null) { $ch = curl_init (); curl_setopt ( $ch, CURLOPT_URL, $url ); curl_setopt ( $ch, CURLOPT_TIMEOUT, 5 ); curl_setopt ( $ch, CURLOPT_RETURNTRANSFER, 1 ); curl_setopt ( $ch, CURLOPT_FOLLOWLOCATION, 1 ); curl_setopt ( $ch, CURLOPT_HEADER, 0 ); curl_setopt ( $ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36' ); if($otherParams['randip']){ $randip=mt_rand(1, 200).'.'.mt_rand(1, 200).'.'.mt_rand(1, 200).'.'.mt_rand(1, 200); $header = array( 'CLIENT-IP:'.$randip, 'X-FORWARDED-FOR:'.$randip ); curl_setopt($ch, CURLOPT_HTTPHEADER, $header); } if(isset($otherParams['ssl'])){ curl_setopt ( $ch, CURLOPT_SSL_VERIFYPEER, FALSE ); curl_setopt ( $ch, CURLOPT_SSL_VERIFYHOST, FALSE ); } if(!empty($post_data)){ if(is_array($post_data)){ $post_data=http_build_query($post_data); } curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data); } if(!empty($cookieFile)){ curl_setopt($ch, CURLOPT_COOKIEJAR, $cookieFile); curl_setopt($ch, CURLOPT_COOKIEFILE, $cookieFile); } $html = curl_exec ( $ch ); curl_close ( $ch ); if (empty ( $html )) { return NULL; } if($fromEncode=='auto'){ preg_match('/<meta[^<>]*?content=[\'\"]text\/html\;\s*charset=(?P<charset>[^\'\"\<\>]+?)[\'\"]/i', $html,$charset) || preg_match('/<meta[^<>]*?charset=[\'\"](?P<charset>[^\'\"\<\>]+?)[\'\"]/i', $html,$charset); $fromEncode=$charset['charset']?$charset['charset']:null; } if (!empty ( $fromEncode )&&strcasecmp($fromEncode,'utf-8')!==0) { $html = iconv($fromEncode,'utf-8//IGNORE',$html); } return trim($html); } function array_htmlspecialchars($arr,$flags=ENT_QUOTES){ foreach ($arr as $k=>$v){ if(!is_array($v)){ $arr[$k]=htmlspecialchars($v,$flags); }else{ $arr[$k]=array_htmlspecialchars($v,$flags); } } return $arr; } function array_htmlspecialchars_decode($arr,$flags=ENT_QUOTES){ foreach ($arr as $k=>$v){ if(!is_array($v)){ $arr[$k]=htmlspecialchars_decode($v,$flags); }else{ $arr[$k]=array_htmlspecialchars_decode($v,$flags); } } return $arr; } function array_array_map($callback, $arr1, array $_ = null){ if(is_array($arr1)){ foreach ($arr1 as $k=>$v){ if(!is_array($v)){ $arr[$k]=call_user_func($callback, $v); }else{ $arr[$k]=array_array_map($callback,$v,$_); } } } return $arr; } function get_column($id){ global $_M; static $columns=array(); if(!isset($columns[$id])){ $column=DB::get_one("SELECT * FROM {$_M[table][column]} WHERE `id`='{$id}'"); $columns[$id]=$column; }else{ $column=$columns[$id]; } return $column; } function get_article_column(){ global $_M; static $column_list; if(!isset($column_list)){ $sql="SELECT * FROM {$_M[table][column]} WHERE module=2 ORDER BY no_order"; $query=DB::query($sql); while($list=DB::fetch_array($query)){ switch ($list['classtype']){ case 1:$column_list[1][$list['id']]=$list;break; case 2:$column_list[2][$list['bigclass']][$list['id']]=$list;break; case 3:$column_list[3][$list['bigclass']][$list['id']]=$list;break; } } DB::free_result($query); } return $column_list; } function filter_html_tags($content,$tags){ if(!is_array($tags)){ $tags = preg_replace('/[\s\,\，]+/', ',', $tags); if($tags){ $tags=explode(',', $tags); $tags=array_unique($tags); } } $arr1=$arr2=array(); foreach ($tags as $tag){ $tag=strtolower($tag); if($tag=='script'||$tag=='style'||$tag=='object'){ $arr1[$tag]=$tag; }else{ $arr2[$tag]=$tag; } } if($arr1){ $content=preg_replace('/<('.implode('|', $arr1).')[^<>]*>[\s\S]*<\/\1>/i', '', $content); } if($arr2){ $content=preg_replace('/<[\/]*('.implode('|', $arr2).')[^<>]*>/i', '', $content); } return $content; } function exit_json($arr){ die(json_encode($arr)); } function setting_caiji_config($config=array()){ global $_M; $config_name=constant('CAIJI_CONFIG_NAME'); $caiji_config=DB::get_one("SELECT * FROM {$_M['table']['config']} WHERE `name`='{$config_name}'"); if(empty($caiji_config)){ die('配置文件错误！'); }else{ $caiji_config['value']=unserialize($caiji_config['value']); if(!is_array($caiji_config['value'])){ $caiji_config['value']=array(); } $config=array_merge($caiji_config['value'],$config); $config=addslashes(serialize($config)); DB::query("UPDATE {$_M['table']['config']} SET `value`='{$config}' WHERE `name`='{$config_name}'"); } } function publish_article($article){ global $_M; $status=array('success'=>false); if(empty($article['title'])){ $status['error']='文章标题为空'; return $status; } if(empty($article['content'])){ $status['error']='文章内容为空'; return $status; } if(empty($article['column']['column1'])){ $status['error']='请选择发布到的文章栏目！'; return $status; } $operate=$article['operate']; if(in_array('download_image',$operate)){ try { $article['content']=match_image_and_download($article['content']); }catch (Exception $ex){ $status['error']=$ex->getMessage(); return $status; } } if(empty($article['content'])){ $status['error']='文章内容不能为空'; return $status; } $article=array_array_map('addslashes', $article); $timenow=time(); $timestr=date('Y-m-d H:i:s',$timenow); if($article['column']['column3']>0){ $classid=$article['column']['column3']; }else{ $classid=$article['column']['column2']>0?$article['column']['column2']:$article['column']['column1']; } $column_class=get_column($classid); if(empty($article['description'])){ $article['description']=mb_strcut(strip_tags($article['content']),0,150); } $sql = "INSERT INTO {$_M['config']['tablepre']}news SET
	`title`        = '{$article[title]}',
	`content`      = '{$article[content]}',
	`keywords`     = '{$article[keywords]}',
	`description`  = '{$article[description]}',
	`class1`       = '{$article[column][column1]}',
	`class2`       = '{$article[column][column2]}',
	`class3`       = '{$article[column][column3]}',
	`lang`         = '{$column_class[lang]}',
	`updatetime`   = '{$timestr}',
	`addtime`      = '{$timestr}',
	`issue`        = '{$_M[user][admin_name]}',
	`displaytype`  = 1
	"; if(DB::query($sql)){ $status['success']=true; $status['newsid']=DB::insert_id(); }else{ $status['error']='发布失败'; } return $status; } function match_image_and_download($html,$filepath=null){ global $_M; if(preg_match_all('/<img[^<>]*src=[\'\"](?P<url>[^\'\"]+?\.(?P<ext>jpg|jpeg|gif|png))[\'\"]/i', $html,$imgs)){ $filepath=!empty($filepath)?$filepath:'upload/images/'.date('Ym').'/'; load::sys_func('file'); if(!makedir(PATH_WEB.$filepath)){ throw new Exception('图片目录创建失败'); return; } $downloaded=array(); try { for($i=0;$i<count($imgs['url']);$i++){ $imgurl=$imgs['url'][$i]; if($downloaded[$imgurl]){ continue; } $imgfile=curl_get_html($imgurl,$fencode=null); if($imgfile){ srand((double)microtime() * 1000000); $rnd = rand(100, 999); $filename = date('U') + $rnd; $filename =$filepath.$filename.'.'.$imgs['ext'][$i]; if(file_put_contents(PATH_WEB.$filename, $imgfile)){ $downloaded[$imgurl]=true; $html=str_replace($imgurl, $_M['url']['site'].$filename, $html); } } } }catch (Exception $e){ throw new Exception('图片下载出错'); return; } } return $html; } function print_array($arr,$echo=false){ $str=array(); foreach ($arr as $k=>$v){ if(!is_array($v)){ $str[$k]="'{$k}'=>'{$v}'"; }else{ $str[$k]="'{$k}'=>".print_array($v); } } $return='Array('. implode(',', $str) .')'; if($echo){ echo $return; }else{ return $return; } } function convert_article_content($content){ if(!is_array($content)){ $data=unserialize($content); if(!is_array($data)){ $data['content']=$content; } $data=array_array_map('stripslashes',$data); }else{ $data=$content; } return $data; } function create_complete_url($url,$base_url,$domain_url){ if(strpos($url,'//')===0){ $url='https:'.$url; }elseif(strpos($url,'/')===0){ $url=$domain_url.'/'.ltrim($url,'/'); }elseif(stripos($url,'javascript')===0||stripos($url,'#')===0){ }elseif(!preg_match('/^\w+\:\/\//', $url)){ $url=$base_url.'/'.ltrim($url,'/'); } return $url; } function match_base_url($url,$html){ if(preg_match('/<base[^<>]*href=[\'\"](?P<base>[^\<\>\"\']*?)[\'\"]/i', $html,$base_url)){ $base_url=$base_url['base']; }else{ $base_url=preg_replace('/[\#\?][^\/]*$/', '', $url); if(preg_match('/\.[a-z]+$/i', $base_url)){ $base_url=preg_replace('/\/[^\/]*\.[a-z]+$/', '', $base_url); } } $base_url=rtrim($base_url,'/'); return $base_url?$base_url:null; } function match_domain_url($url){ if(preg_match('/^\w+\:\/\/([\w\-]+\.){1,}[\w]+/', $url,$domain_url)){ $domain_url=rtrim($domain_url[0],'/'); } return $domain_url?$domain_url:null; } ?>

